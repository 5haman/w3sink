(function(exports) {
	"use strict";
	
	function GS(sel) {
		this.canvas = d3.select(sel);
		
		this.svg = this.canvas.append("svg")
			.attr("width", '100%')
			.attr("min-height", '500px');
		
		this.transform = {'scale': 1, 'dx': 0, 'dy': 0};

		this.container = this.svg.append("g");
		this.container.attr('transform', 'scale(1)');

		this.edges = this.container.append("g");
		this.nodes = this.container.append("g");

		this.default_node_style = "fill:%autofill%;size:25px;stroke:#ffffff;stroke-width:5px;";
		this.default_node_size  = "1%";
		this.default_edge_style = "stroke:#06C;stroke-width:2px;";

		this.dispatch = d3.dispatch(
			"nodeAdded", "nodeAttributeAdded", "nodeAttributeChanged", "nodeAttributeRemoved", "nodeRemoved",
			"edgeAdded", "edgeAttributeAdded", "edgeAttributeChanged", "edgeAttributeRemoved", "edgeRemoved",
			"graphAttributeAdded", "graphAttributeChanged", "graphAttributeRemoved",
			"stepBegins", "graphCleared");
		
		this.colors_generator = d3.scale.category20();

		this.autofit = true;
		this.layout = d3.layout.force()
				.gravity(0)
				.charge(function(d){return -15;})
				.linkDistance(30);

		this.padding = {'top':25, 'right': 25, 'bottom': 25, 'left': 25};
		this.viewbox = {'minx':0,  'miny': 0, 'maxx': 0, 'maxy': 0};

		this.layout_running = false;
		this.ut();
	}

	GS.prototype.ut = function() {
		this.container.transition()
			.duration(1000)
			.attr('transform', 'translate('+this.transform.dx+','+this.transform.dy+')scale('+this.transform.scale+')');
	}

	GS.prototype.zoom = function(z) {
		this.transform.scale = z;
		this.transform.dx = (1-z) * 500;
		this.transform.dy = (1-z) * 500;

		this.ut();
	}

	GS.prototype.on = function(event_name, func) {
		this.dispatch.on(event_name, func);
	}

	GS.prototype.an = function(id) {
		var that = this;
		var nodes = this.nodes.selectAll('circle.node').data();

		nodes.push({'id':''+id});

		this.nodes.selectAll('circle.node')
			.data(nodes, function(d) { return d.id; }).enter().append("circle")
				.attr("class", "node")
				.attr("r", this.default_node_size)
				.attr("cx", function(d) {return that.rx();})
				.attr("cy", function(d) {return that.ry();})
				.attr('data-nodeid', function(d){return d.id;})
				.style("fill", function(d) { return 'black'; })
				.style("stroke", "white")
				.style("stroke-width", "2px")
				.call(this.layout.drag)
				.append("title")
				.text(function(d) { return d.id; });

		var defStyle = this.default_node_style
			.replace(/%autofill%/, this.colors_generator(~~(Math.random()*200)));

		this.cn(id, "style", defStyle);
		this.al('reload');

		this.dispatch.nodeAdded(id);
	}

	GS.prototype.dn = function(id) {
		var edgeToRemove = [];
		var edges = this.edges.selectAll('line.edge').data();

		for (var i = 0; i < edges.length; i++) {
			if (edges[i].source.id == id || edges[i].target.id == id)
				edgeToRemove.push(edges[i]);
		}

		for (var i = 0; i < edgeToRemove.length; i++)
			this.de(edgeToRemove[i].id);

		var nodes = this.nodes.selectAll('circle.node').data();
		var nodes_data = [];

		for (var i = 0; i < nodes.length; i++) {
			if (nodes[i].id != id)
				nodes_data.push(nodes[i]);
		}

		this.nodes.selectAll('circle.node')
			.data(nodes_data, function(d) { return d.id; })
			.exit().remove();
		
		this.al('reload');

		this.dispatch.nodeRemoved(id);
	}

	GS.prototype.cn = function(id, key, value) {	
		var n = this.sn(id);
		
		if (typeof(value) == 'undefined') {
			this.dispatch.nodeAttributeRemoved(id, key);
		}
		else {
			if (key == 'xy' || key === 'xyz')
				this.cn_xy(n, value[0], value[1]);
			else if (key=='size')
				n.attr('r', value);
			else if (key=='style')
				this.ss(n, value);
			
			this.dispatch.nodeAttributeChanged(id, key, value);
		}
	}

	GS.prototype.cn_xy = function(n, x, y) {
		if (typeof(n) == 'string' || typeof(n) == 'number')
			n = this.sn(n);
		
		//console.log("set xy of", n, "to", x, y);
		
		var data = n.datum();
		
		data.x = x;
		data.y = y;
		
		this.updateViewBox(x, y);
		
		x = this.rx(data.x);
		y = this.ry(data.y);
		
		//console.log(data.x, data.y, '-->', x, y, this.viewbox, $(this.svg[0]).width(), $(this.svg[0]).height());
		
		n.attr('cx', x);
		n.attr('cy', y);
		
		this.edges.selectAll("line.edge[data-src='"+data.id+"']")
			.attr('x1', x)
			.attr('y1', y);
		this.edges.selectAll("line.edge[data-trg='"+data.id+"']")
			.attr('x2', x)
			.attr('y2', y);
	}

	GS.prototype.sn = function(id) {
		return this.nodes.select('circle.node[data-nodeid="'+id+'"]');
	}

	GS.prototype.ae = function(id, src, trg) {
		var nsrc = this.sn(src),
			ntrg = this.sn(trg);
			
		if (nsrc[0][0] === null) {
			console.log("node '"+src+"' not found for edge '"+id+"'");
			return;
		}
		
		if (ntrg[0][0] === null) {
			console.log("node '"+trg+"' not found for edge '"+id+"'");
			return;
		}
		
		var edges = this.edges.selectAll('line.edge').data();
		edges.push({'id': id, 'source': this.sn(src).data()[0], 'target': this.sn(trg).data()[0], 'value':10});
		
		var x1 = this.sn(src).attr('cx'),
			y1 = this.sn(src).attr('cy'),
			x2 = this.sn(trg).attr('cx'),
			y2 = this.sn(trg).attr('cy');

		this.edges.selectAll('line.edge')
			.data(edges, function(d) {return d.id;}).enter()
				.append("line")
				.attr("class", "edge")
				.attr("data-edgeid", function(d){return d.id;})
				.attr('x1', x1)
				.attr('y1', y1)
				.attr('x2', x2)
				.attr('y2', y2)
				.style("stroke", "black")
				.style("stroke-width", "1px");

		this.se(id).attr('data-src', src).attr('data-trg', trg);
		this.ce(id, "style", this.default_edge_style);

		this.dispatch.edgeAdded(id, src, trg);
	}

	GS.prototype.de = function(id) {
		var edges = this.edges.selectAll('line.edge').data();
		var edges_data = [];
		
		for (var i = 0; i < edges.length; i++) {
			if (edges[i].id != id)
				edges_data.push(edges[i]);
		}
		
		this.edges.selectAll('line.edge').data(edges_data, function(d) {return d.id;})
			.exit().remove();

		this.al('reload');
		this.dispatch.edgeRemoved(id);
	}

	GS.prototype.ce = function(id, key, value) {
		var e = this.se(id);
		
		if (typeof(value) == 'undefined') {
			this.dispatch.edgeAttributeRemoved(id, key);
		}
		else {
			if (key=='style')
				this.ss(e, value);
			
			this.dispatch.edgeAttributeChanged(id, key, value);
		}
	}

	GS.prototype.se = function(id) {
		return this.edges.select('line.edge[data-edgeid="'+id+'"]');
	}

	GS.prototype.ss = function(e, style) {
		var styles = style.split(/\s*;\s*/);
			
		for (var i=0; i<styles.length; i++) {
			if (styles[i]=='') continue;
			var t = styles[i].split(/:/);
			t[0] = t[0].trim();
			t[1] = t[1].trim();
			e.style(t[0], t[1]);
		}
	}

	GS.prototype.rx = function(x) {
		if (typeof(x) === 'undefined')
			x = Math.random();
		
		if (x === NaN || x === Infinity)
			return 0;
		
		x = (x - this.viewbox.minx) / (this.viewbox.maxx - this.viewbox.minx);
		
		return this.padding.left + (jQuery(this.svg[0]).width() - this.padding.left - this.padding.right) * x;
	}

	GS.prototype.ry = function(y) {
		if (typeof(y) === 'undefined')
			y = Math.random();
		
		if (y === NaN || y === Infinity)
			return 0;
		
		y = (y - this.viewbox.miny) / (this.viewbox.maxy - this.viewbox.miny);
		
		return this.padding.top + (jQuery(this.svg[0]).height() - this.padding.top - this.padding.bottom) * y;
	}

	GS.prototype.af = function() {
		var mx, Mx, my, My;				
		var set = false;
		
		this.nodes.selectAll('circle.node')
			.each(function(d) {
				if (d.x == NaN || d.y == NaN)
					return;

				if (!set) {
					mx = d.x;
					Mx = d.x;
					my = d.y;
					My = d.y;
					set = true;
				}
				
				mx = Math.min(mx, d.x);
				Mx = Math.max(Mx, d.x);
				my = Math.min(my, d.y);
				My = Math.max(My, d.y);
			});
		
		this.updateViewBox(mx, my, Mx, My);
	}
	
	GS.prototype.updateViewBox = function (minx, miny, maxx, maxy) {
		var vb = this.viewbox;
		var changed = false;
		
		if (typeof(maxx) === 'undefined') {
			maxx = minx;
			maxy = miny;
		}
		
		if (minx < vb.minx) {
			changed = true;
			vb.minx = minx;
		}
		
		if (miny < vb.miny) {
			changed = true;
			vb.miny = miny;
		}
		
		if (maxx > vb.maxx) {
			changed = true;
			vb.maxx = maxx;
		}
		
		if (maxy > vb.maxy) {
			changed = true;
			vb.maxy = maxy;
		}
		
		if (changed) {
			var that = this;
			/*
			this.nodes.selectAll('circle.node')
				.each(function(d) {
					if (d.x != NaN) {
						d.x = that.rx((d.x-vb.minx)/(vb.maxx-vb.minx));
						d.y = that.ry((d.y-vb.miny)/(vb.maxy-vb.miny));
					} else {
						d.x = that.rx();
						d.y = that.ry();
					}
				});
*/
			this.nodes.selectAll('circle.node')
				.attr("cx", function(d) {return that.rx(d.x);})
				.attr("cy", function(d) {return that.ry(d.y);});

			this.edges.selectAll('line.edge')
				.attr("x1", function(d) {return that.rx(d.source.x);})
				.attr("y1", function(d) {return that.ry(d.source.y);})
				.attr("x2", function(d) {return that.rx(d.target.x);})
				.attr("y2", function(d) {return that.ry(d.target.y);});
		}
	}

	GS.prototype.al = function(action) {
		if (typeof(action) == 'undefined')
			action = 'start';

		switch (action) {
		case 'start':
			var that = this;

			this.layout.on("tick", function() {that.af();});
			this.layout_running = true;
			this.al('reload');

			break;
		case 'reload':
			if (this.layout_running)
				this.layout.stop();

			var nodes = this.nodes.selectAll('circle.node');
			this.layout.nodes(nodes.data());

			var edges = this.edges.selectAll('line.edge');
			this.layout.links(edges.data());

			if (this.layout_running)
				this.layout.start();

			break;
		case 'stop':
			this.layout_running = false;
			this.layout.stop();
			break;
		case 'clear':
			this.layout.stop();
			this.layout.nodes([]).links([]);

			if (this.layout_running)
				this.layout.start();

			break;
		}
	}
	
	GS.prototype.cl = function() {
		this.edges.selectAll('line.edge').remove();
		this.nodes.selectAll('circle.node').remove();
		this.al('clear');
		this.dispatch.graphCleared();
	}

	GS.prototype.cg = function (key, value) {
	}

	GS.prototype.st = function (step) {
	}

	GS.prototype.nodeAdded = function (sourceId, timeId, nodeId) {
		this.an(nodeId);
	}

	GS.prototype.nodeRemoved = function (sourceId, timeId, nodeId) {
		this.dn(nodeId);
	}

	GS.prototype.nodeAttributeAdded = function (sourceId, timeId, nodeId, key, value) {
		this.cn(nodeId, key, value);
	}

	GS.prototype.nodeAttributeChanged = function (sourceId, timeId, nodeId, key, oldValue, newValue) {
		this.cn(nodeId, key, newValue);
	}

	GS.prototype.nodeAttributeRemoved = function (sourceId, timeId, nodeId, key) {
		this.cn(nodeId, key, value);
	}

	GS.prototype.edgeAdded = function (sourceId, timeId, edgeId, from, to, directed) {
		this.ae(edgeId, from, to, directed);
	}

	GS.prototype.edgeRemoved = function (sourceId, timeId, edgeId) {
		this.de(edgeId);
	}

	GS.prototype.edgeAttributeAdded = function (sourceId, timeId, edgeId, key, value) {
		this.ce(edgeId, key, value);
	}

	GS.prototype.edgeAttributeChanged = function (sourceId, timeId, edgeId, key, oldValue, newValue) {
		this.ce(edgeId, key, newValue);
	}

	GS.prototype.edgeAttributeRemoved = function (sourceId, timeId, edgeId, key) {
		this.ce(edgeId, key, value);
	}

	GS.prototype.graphAttributeAdded = function (sourceId, timeId, key, value) {
		this.cg(key, value);
	}

	GS.prototype.graphAttributeChanged = function (sourceId, timeId, key, oldValue, newValue) {
		this.cg(key, newValue);
	}

	GS.prototype.graphAttributeRemoved = function (sourceId, timeId, key) {
		this.cg(key, value);
	}

	GS.prototype.graphCleared = function (sourceId, timeId) {
		this.cl();
	}

	GS.prototype.stepBegins = function (sourceId, timeId, step) {
		this.st(step);
	}

	GS.prototype.dgs = function (url) {
		var dgs = new DGSParser(this);
		
		d3.text(url, function(data) {
			dgs.setData(data);
			dgs.parse();
		});
	}
	
	function DGSParser(graph) {
		this.graph = graph;
		this.lines = [];
		this.line = '';
	}

	DGSParser.prototype.setData = function(data) {
		var re, line;
		this.lines = data.split('\n').reverse();
	
		line = this.lines.pop();
		re = /^DGS00\d$/;
		if (!re.test(line))
			throw new Error("invalid dgs header '" + line + "'");
	
		line = this.lines.pop();
		re = /^\S+ \d+ \d+$/;
		if (!re.test(line))
			throw new Error("invalid dgs header '" + line + "'");

		var i = 0;

		while (i < this.lines.length) {
			if (this.lines[i] === '' || this.lines[i].charAt(0) === '#') {
				this.lines.splice(i, 1);
			} else i++;
		}
	}

	DGSParser.prototype.ready = function() {
		return (this.lines.length > 0);
	}

	DGSParser.prototype.next = function() {
		this.line =  this.lines.pop();
		return this;
	}

	DGSParser.prototype.dir = function() {
		var dir = this.line.substr(0, 2).toLowerCase();
		this.line = this.line.substr(3, this.line.length-3);
		return dir;
	}

	DGSParser.prototype.parse = function() {
		var dir;

		while (this.ready()) {
			this.next();

			dir = this.dir();

			//
			// Execute directive
			//
			switch(dir) {
			case 'an':
			    var id = this.nextId();
			    
			    this.graph.an(id);
			    this.parseAttributes('node', id);
			    break;
			case 'cn':
			    var id = this.nextId();
			    this.parseAttributes('node', this.graph.sn(id));
			    break;
			case 'dn':
			    var id = nextId();
			    this.graph.dn(id);
			    break;
			case 'ae':
			    var id = this.nextId(),
			    	source = this.nextId(),
			    	target = this.nextId();
			    
			    this.graph.ae(id, source, target);
			    break;
			case 'ce':
			    var id = this.nextId();

			    this.parseAttributes('edge', this.graph.se(id));
			    break;
			case 'de':
			    var id = this.nextId();

			    this.graph.de(id);
			    this.parseAttributes('edge', id);
			    break;
			case 'cg':
			    break;
			case 'st':
			    break;
			case 'cl':
			    this.graph.cl();
			    break;
			default:
			    throw new Error("unknown directive '" + dir + "'");
			}
		}
	}

	DGSParser.prototype.nextId = function() {
		var re = /^(?:'([^'])*'|"([^"])"|([\w\d]+))(?: (.*))?$/;
	    var ex = re.exec(this.line);
		var i = 0;

		if (ex[++i] !== undefined || ex[++i] !== undefined || ex[++i] !== undefined) {
			this.line = ex [4];
			return ex[i];
		}
		else return undefined;
	}

	DGSParser.prototype.parseAttributes = function(type, e, attributes) {
	    var re = /[+-]?("[^"]*"|'[^']*'|\w[[\w.]*)([:=](\d+([.]\d+)?|\w[[\w.]*|"[^"]*"|'[^']*'|#[a-fA-F0-9]{6}))?/g;
	    switch(type) {
	    case 'node':
			break;
	    case 'edge':
			break;
	    }
	}

	exports.GS = GS;
})(window);
